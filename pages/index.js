import React, { useEffect, useState } from "react";
import Head from "next/head";
import dynamic from "next/dynamic";

// components libs
import Layout from "@/components/Layout";
import makeData from "@/libs/makeData";

const Table = dynamic(() => import("@/components/Table"), { ssr: false });

const EditableCell = ({
  value: initialValue,
  row: { index },
  column: { id },
  updateMyData, // This is a custom function that we supplied to our table instance
}) => {
  // We need to keep and update the state of the cell normally
  const [value, setValue] = useState(initialValue);

  const onChange = (e) => {
    setValue(e.target.value);
  };

  // We'll only update the external data when the input is blurred
  const onBlur = () => {
    updateMyData(index, id, value);
  };

  // If the initialValue is changed external, sync it up with our state
  React.useEffect(() => {
    setValue(initialValue);
  }, [initialValue]);

  return <input value={value} onChange={onChange} onBlur={onBlur} />;
};

export default function Home() {
  const [data, setData] = React.useState(() => makeData(20));

  const columns = React.useMemo(
    () => [
      {
        Header: "Item No",
        accessor: "itemno",
      },
      {
        Header: "Stock Code",
        accessor: "stockcode",
      },
      {
        Header: "Part No",
        accessor: "partno",
      },
      {
        Header: "Description",
        accessor: "description",
      },
      {
        Header: "Supplier A",
        columns: [
          {
            Header: "Quatity",
            accessor: "quantity",
          },
          {
            Header: "Price",
            accessor: "price",
          },
          ,
          {
            Header: "Lead Time",
            accessor: "leadtime",
          },
        ],
      },
      {
        Header: "Supplier B",
        columns: [
          {
            Header: "Quatity",
            accessor: "quantityb",
          },
          {
            Header: "Price",
            accessor: "priceb",
          },
          ,
          {
            Header: "Lead Time",
            accessor: "leadtimeb",
          },
        ],
      },
      {
        Header: "Supplier C",
        columns: [
          {
            Header: "Quatity",
            accessor: "quantityc",
          },
          {
            Header: "Price",
            accessor: "pricec",
          },
          ,
          {
            Header: "Lead Time",
            accessor: "leadtimec",
          },
        ],
      },
      {
        Header: "Result",
        accessor: "result",
      },
    ],
    []
  );

  const updateMyData = (rowIndex, columnId, value) => {
    // setSkipPageReset(true);
    setData((old) =>
      old.map((row, index) => {
        if (index === rowIndex) {
          return {
            ...old[rowIndex],
            [columnId]: value,
          };
        }
        return row;
      })
    );
  };

  // const data = React.useMemo(() => makeData(20), []);

  return (
    <>
      <Head>
        <title>React Table</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main>
        <Layout>
          {" "}
          <Table columns={columns} data={data} updateMyData={updateMyData} />
        </Layout>
      </main>
    </>
  );
}
